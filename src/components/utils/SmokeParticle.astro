<div class="fixed top-0 w-full h-full" id="bkg"></div>

<script>
  import * as THREE from "three";

  const $ = (selector: String) => document.querySelector(selector.toString());
  const $$ = (selector: String) =>
    document.querySelectorAll(selector.toString());

  const bkg = document.getElementById("bkg");
  const w = window.innerWidth;
  const h = window.innerHeight;

  const scene = new THREE.Scene();

  const camera = new THREE.PerspectiveCamera(75, w / h, 10, 600);
  camera.position.z = 100;
  scene.add(camera);

  const renderer = new THREE.WebGLRenderer();
  renderer.setSize(w, h);

  renderer.setClearColor(0x000000, 0);
  bkg?.appendChild(renderer.domElement);

  const light = new THREE.DirectionalLight(0xf2f2f2, 0.5);
  light.position.set(-1, 3, 1);
  light.castShadow = true;
  scene.add(light);

  const Particles: any = [];

  new THREE.TextureLoader().load("particles/Particles.png", (texture) => {
    const geometry = new THREE.PlaneGeometry(100, 100);
    const material = new THREE.MeshBasicMaterial({
      map: texture,
      transparent: true,
      opacity: 0.2,
      color: 0x000000,
    });

    const number_of_particles = 55;
    for (let i = 0; i < number_of_particles; i++) {
      const particle = new THREE.Mesh(geometry, material);
      particle.position.x = Math.random() * 300 - 100;
      particle.position.y = Math.random() * 300 - 100;
      particle.position.z = Math.random() * 300 - 100;

      Particles.push(particle);
      scene.add(particle);
    }
  });

  const animate = () => {
    requestAnimationFrame(animate);
    Particles.forEach((particle: any) => {
      particle.rotation.z += 0.008;
    });

    renderer.render(scene, camera);
  };

  const resize = () => {
    camera.aspect = w / h;
    camera.updateProjectionMatrix();
    renderer.setSize(w, h);
    renderer.setSize(w, h);
  };

  document.addEventListener("resize", resize);

  animate();
</script>
